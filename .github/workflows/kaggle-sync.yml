name: Sync to Kaggle

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'scripts/**'
      - 'notebooks/**'
      - 'docs/**'
      - 'requirements.txt'
      - 'README.md'
      - '.github/workflows/kaggle-sync.yml'
      - 'kaggle/**'

jobs:
  upload-dataset:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Kaggle CLI
        run: |
          python -m pip install --upgrade pip
          pip install kaggle

      - name: Configure Kaggle credentials
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        run: |
          mkdir -p ~/.kaggle
          echo "{\"username\":\"${KAGGLE_USERNAME}\",\"key\":\"${KAGGLE_KEY}\"}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Prepare Kaggle package
        run: |
          rm -rf kaggle/package
          mkdir -p kaggle/package
          cp -r src kaggle/package/src
          cp -r scripts kaggle/package/scripts
          cp -r notebooks kaggle/package/notebooks
          cp -r docs kaggle/package/docs
          cp requirements.txt kaggle/package/requirements.txt
          cp README.md kaggle/package/README.md
          cp kaggle/dataset-metadata.json kaggle/package/dataset-metadata.json

      - name: Determine dataset id
        id: dataset
        run: |
          DATASET_ID=$(python -c "import json; meta=json.load(open('kaggle/package/dataset-metadata.json')); print(meta.get('id',''))")
          echo "DATASET_ID=$DATASET_ID" >> $GITHUB_ENV
          echo "dataset_id=$DATASET_ID" >> $GITHUB_OUTPUT
          echo "Using Kaggle dataset id: $DATASET_ID"

      - name: Show Kaggle identity
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        run: "echo 'Kaggle user: ' $KAGGLE_USERNAME"

      - name: Create dataset if missing
        run: |
          set -e
          if kaggle datasets files "$DATASET_ID" >/dev/null 2>&1; then
            echo "Dataset exists: $DATASET_ID"
          else
            echo "Dataset not found. Attempting to create: $DATASET_ID"
            kaggle datasets create -p kaggle/package -q
          fi

      - name: Upload new dataset version
        run: |
          kaggle datasets version -p kaggle/package -m "Auto update from GitHub Actions" --dir-mode zip -q
